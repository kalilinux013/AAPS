public class twostacksinarray {
    int[] arr;
    int top1, top2;

    public twostacksinarray(int size) {
        arr = new int[size];
        top1 = -1;
        top2 = size;
    }

    public void push1(int val) {
        if (top1 + 1 < top2) {
            arr[++top1] = val;
        } else {
            System.out.println("Stack Overflow on Stack 1");
        }
    }

    public void push2(int val) {
        if (top1 + 1 < top2) {
            arr[--top2] = val;
        } else {
            System.out.println("Stack Overflow on Stack 2");
        }
    }

    public int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        } else {
            System.out.println("Stack Underflow on Stack 1");
            return -1;
        }
    }

    public int pop2() {
        if (top2 < arr.length) {
            return arr[top2++];
        } else {
            System.out.println("Stack Underflow on Stack 2");
            return -1;
        }
    }

    public static void main(String[] args) {
        twostacksinarray stacks = new twostacksinarray(10);
        stacks.push1(1);
        stacks.push1(2);
        stacks.push2(9);
        stacks.push2(8);

        System.out.println("Popped from stack 1: " + stacks.pop1());
        System.out.println("Popped from stack 2: " + stacks.pop2());
    }
}

// time complexity: O(1) for all operations
// space complexity: O(n)
